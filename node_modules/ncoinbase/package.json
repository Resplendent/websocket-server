{
  "name": "ncoinbase",
  "version": "0.1.0",
  "description": "Coinbase API consumer",
  "main": "index.js",
  "scripts": {
    "test": "mocha"
  },
  "dependencies": {
    "request": "2.27.x",
    "q": "0.9.x"
  },
  "devDependencies": {
    "express": "3.4.x",
    "mocha": "1.13.x"
  },
  "repository": "",
  "keywords": [
    "coinbase",
    "bitcoin"
  ],
  "author": {
    "name": "Mark Percival",
    "email": "m@mdp.im"
  },
  "license": "MIT",
  "readme": "# NCoinbase\nAn OAuth2 compliant NodeJS Coinbase API library\n\n[![Build Status](https://secure.travis-ci.org/mdp/NCoinbase.png)](http://travis-ci.org/mdp/NCoinbase)\n\n## Quick Overview\n\n- Implements all the v1 API methods\n- Every API method allows callbacks or returns promises\n- Automatically refreshes expired tokens (and fires an event)\n\n## Installation\n\n    npm install ncoinbase\n\n## Usage\n\n### Setting up the client\n\n    var Coinbase = require('ncoinbase').Coinbase,\n        api = new Coinbase({\n          \"id\": \"api_id\",\n          \"secret\": \"api_secret\",\n          \"redirect_uri\": \"http://localhost:4000/callback\",\n          \"scope\": \"balance request\"\n        });\n\n### Creating and API consumer (user)\n\n    // Assuming we pulled the users credentials\n    // from the database and assigned them to 'user'\n    credentials = new Credentials(user);\n    consumer = api.createConsumer(credentials);\n\n### Accessing the API\n\n    req.coinbase.account_balance(function (err, resp) {\n      console.log(\"My Account balance is: \" + resp.amount );\n    });\n\n#### Using Promises\n\n    req.coinbase.account_balance()\n      .then(function (resp) {\n        console.log(\"Resp\", resp);\n        res.send(resp);\n      })\n      .catch(function (err) {\n        console.log(\"Err\", err);\n        res.send(\"API Request failed: \" + err.message);\n      });\n\n#### Refreshing expired tokens\n\nExpired tokens will be automatically refreshed when you attempt an API call.\nYou can, and should, listen for this for the 'updatedCredentials' event and\nsave the new credentials.\n\n    consumer.on('updatedCredentials', function (credentials) {\n      user.credentials = credentials;\n      user.save();\n    });\n    // Let's assume the users credentials are expired\n    // and we need to use the refresh token.\n    consumer.account_balance(function (err, resp) {\n      // This will still work, but before the 'account_balance'\n      // request is made, the credentials will be refreshed,\n      // and the 'updatedCredentials' event will be fired.\n      console.log(\"I have \" + resp.amount + \" many bitcoins!!!\");\n    });\n\n## Example web application\n\n### Clone the repo and 'npm install'\n\n    git clone https://github.com/mdp/NCoinbase.git\n    cd NCoinbase\n    npm install\n\n    node example/server.js\n\n### Authenticate with Coinbase\n\nNow visit [http://localhost:4000](http://localhost:4000) to authenticate\n\n### Exercise the API\n\nAfter authenticating you should see your account details on the index page.\nYou can also try [http://localhost:4000/my_balance](http://localhost:4000/my_balance)\nfor your account balance.\n\n### The nitty gritty\n\nThe example app show several library features\n\n- Watching for expired/refreshed credentials and updating the session [example/server.js#L27](mdp/NCoinbase/blob/master/example/server.js#L27)\n- Using promises with an error catch [example/server.js#L49](mdp/NCoinbase/blob/master/example/server.js#L49)\n- Passing in a callback function [example/server.js#L61](mdp/NCoinbase/blob/master/example/server.js#L61)\n\n## Testing\n\n    git clone https://github.com/mdp/NCoinbase.git\n    cd NCoinbase\n    npm install\n    npm test\n\n",
  "readmeFilename": "README.md",
  "_id": "ncoinbase@0.1.0",
  "_from": "ncoinbase@0.1.0"
}
